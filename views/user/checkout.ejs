<%- include("../../views/partials/user/top") %>
<!-- Bootstrap CSS -->
<link href="css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="/css/bootstrap.min.css" rel="stylesheet">
<link href="/css/style.css" rel="stylesheet">
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<title>MD-furniture</title>
</head>

<body>
  <div class="row mb-5">
    <div class="col-md-12">
      <h2 class="h3 mb-3 text-black">Your Order</h2>
      <div class="p-3 p-lg-5 border bg-white">
        <table class="table site-block-order-table mb-5">
          <thead>
            <tr>
              <th>Product</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            <% if (!address) { %>
              <script>
                  Swal.fire({
                      title: "No Address Found",
                      text: "Please add an address before proceeding.",
                      icon: "warning",
                      confirmButtonText: "OK",
                      allowOutsideClick: false
                  }).then(() => {
                      window.location.href = "/user/add_address";
                  });
              </script>
          <% } %>
          
            <% if (detailedCart && detailedCart.length > 0) { %>
              <% let totalAmount = 0; %>
              <% detailedCart[0].items.forEach(item => { %>
                  <tr>
                    <input type="hidden" value="item.quantity" name="itemquantity" id="itemquantity">
                      <td><%= item.product.productName %></td>
                      <td>$<%= (item.product.salePrice * item.quantity).toFixed(2) %></td>
                  </tr>
                  <% totalAmount += (item.product.price * item.quantity); %>
              <% }) %>
              <tr>
                <td class="text-black font-weight-bold"><strong>coupon value</strong></td>
                <td class="text-black">$<%= couponValue %></td>
            </tr>
            
              <tr>
                <td class="text-black font-weight-bold"><strong>Cart Subtotal</strong></td>
                <td class="text-black">$<%= subtotal %></td>
            </tr>
              <tr>
                <td class="text-black font-weight-bold"><strong>Delivery Charge</strong></td>
                  <td class="text-black">$100</td>
              </tr>
              <tr>
                <td class="text-black font-weight-bold"><strong>Order Total</strong></td>
                <td class="text-black font-weight-bold">
                  <strong>$<%= total %></strong>
                  <input type="hidden" id="totalInput" name="total" value="<%= total %>">
                </td>
                
              </tr>
          <% } else { %>
              <p>No items in the cart.</p>
          <% } %>
          
          </tbody>
        </table>

        <form >
          <label for="address">Select Address</label>
          <input type="hidden" id="totalInput" name="total" value="<%= total %>">
          <% if (address && address.length > 0) { %>
              <% address.forEach((addr, index) => { %>
                  <div>
                      <input type="radio" id="address<%= index %>" name="address" value="<%= addr._id %>" required>
                      <label for="address<%= index %>">
                          <%= addr.name %>, <%= addr.City %>, <%= addr.state %> - <%= addr.pincode %>
                      </label>
                  </div>
              <% }) %>
          <% } else { %>
              <p>No addresses available</p>
          <% } %>
      
          <a href="/user/address" style="text-decoration: none; color: #beaa4f; cursor: pointer;">
              <h4>Edit Address</h4>
          </a>
      
      
      
        
      
        <div class="add_address">
          <a href="/user/add_address" style="text-decoration: none; color: #753131;">
            <h4>add address</h4>
          </a>
         
        </div>
        
  </div>
  
 

        <div class="border p-3 mb-3">
          <h3 class="h6 mb-0">Select Payment Method</h3>
          
            <!-- Cash on Delivery -->
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="COD" value="cod">
              <label class="form-check-label" for="COD">
                Cash on Delivery
              </label>
            </div>
        
            <!-- Cheque Payment -->
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="Cheque" value="onlinePayment">
              <label class="form-check-label" for="Cheque">
                Online Payment
              </label>
            </div>
        
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet">
              <label class="form-check-label" for="Cheque">
               wallet
              </label>
            </div>
         
        </div>
        <center>
          <div class="form-group">
            
              <button class="btn btn-black btn-lg py-3 btn-block">Place Order</button>
          
          </div>
        </center>
      </form>
      </div>
    </div>
  </div>


  <!-- SweetAlert2 CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  

  <script>
    let cartVersion='<%=cartVersion%>'
    document.querySelector("form").addEventListener("submit", function (event) {
      event.preventDefault(); // Stop default submission
  
      let addressChecked = document.querySelector('input[name="address"]:checked');
      let paymentChecked = document.querySelector('input[name="paymentMethod"]:checked');
  
      if (!addressChecked || !paymentChecked) {
        Swal.fire({
          icon: "warning",
          title: "Selection Required",
          text: "Please select an address and a payment method before proceeding.",
        });
        return; // Stop execution if validation fails
      }
  
      let selectedPaymentMethod = paymentChecked.value;
  
      if (selectedPaymentMethod === "onlinePayment") {
        makePayment(); // Call online payment function
      }
      else if(selectedPaymentMethod === "wallet"){
              wallet()
      }
       else
       {
        COD(); // Call COD function
      }
    });
  </script>

<script>
  async function wallet() {
    try {
      const value = document.getElementById("totalInput")?.value;
      const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
      const address = document.querySelector('input[name="address"]:checked')?.value;

      if (!value || !paymentMethod || !address) {
        Swal.fire({
          icon: "warning",
          title: "Missing Information",
          text: "Please ensure all fields are selected before proceeding.",
        });
        return;
      }

      const response = await fetch("/user/checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ total: value, paymentMethod, address }),
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire({
          icon: "success",
          title: "Order Placed!",
          text: "Your order has been placed successfully.",
        }).then(() => {
          window.location.href = "/user/myorders"; // Redirect to orders page
        });
      } else {
        if(response.status==409){
            Swal.fire({
                icon: 'info',
                title: 'Cart Updated!',
                text: 'Your cart has changed. Please review before proceeding.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.reload(); 
            });
          }else{
          Swal.fire({
            icon: "error",
            title: "Order Failed",
            text: result.message || "Something went wrong!",
          });
        }
      }
    } catch (error) {
      console.error("Error in wallet function:", error);
      Swal.fire({
        icon: "error",
        title: "Network Error",
        text: "Please try again later.",
      });
    }
  }
</script>

    
  <script>
    async function COD() {
      try {
        const value = document.getElementById("totalInput").value;
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        const address = document.querySelector("input[name='address']:checked").value;
  
        const response = await fetch("/user/checkout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            total: value,
            paymentMethod,
            address,
            cartVersion
          }),
        });

        const result = await response.json();
        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Order Placed!",
            text: "Your order has been placed successfully.",
          }).then(() => {
            window.location.href = "/user/myorders"; // Redirect to orders page
          });
        } else {
          if(response.status==409){
            Swal.fire({
                icon: 'info',
                title: 'Cart Updated!',
                text: 'Your cart has changed. Please review before proceeding.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.reload(); 
            });
          }else{
          Swal.fire({
            icon: "error",
            title: "Order Failed",
            text: result.message || "Something went wrong!",
          });
        }
        }
      } catch (error) {
        console.error("Error in COD function:", error);
        Swal.fire({
          icon: "error",
          title: "Network Error",
          text: "Please try again later.",
        });
      }
    }
  </script>
  
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
async function makePayment() {
    Swal.fire({
        title: "Processing Payment...",
        text: "Please wait while we process your order.",
        icon: "info",
        showConfirmButton: false,
        allowOutsideClick: false
    });

    const value = document.getElementById("totalInput").value;
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
    const address = document.querySelector("input[name='address']:checked")?.value;

    if (!value || Number(value) <= 0) {
        Swal.fire({
            icon: "warning",
            title: "Invalid Amount",
            text: "Please enter a valid amount.",
        });
        return;
    }

    if (!paymentMethod || !address) {
        Swal.fire({
            icon: "warning",
            title: "Missing Details",
            text: "Please select payment method and address.",
        });
        return;
    }

    try {
        console.log("Fetching /user/checkout...");
        const response = await fetch("/user/checkout", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                total: value,
                paymentMethod,
                address,
                orders: [{ _id: "test_order_123" }], // Replace with real order data
                userId: "user123" // Replace with real user ID
            }),
        });

        const order = await response.json();
        console.log("Checkout response:", order);

        if (!order.amount) {
            Swal.fire({
                icon: "error",
                title: "Payment Error",
                text: "Invalid payment amount from server.",
            });
            return;
        }

        const options = {
            key: "rzp_test_dDhywmKqhJmLtU",
            amount: order.amount,
            currency: "INR",
            name: "MD_FURNITURE",
            description: "Order Payment",
            order_id: order.id,
            handler: async function (response) {
                const verifyResponse = await fetch("/user/verifyOrder", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ ...response, amount: order.amount })
                });
                const result = await verifyResponse.json();
                Swal.fire({
                    title: result.success ? "Payment Successful!" : "Payment Failed!",
                    text: result.message,
                    icon: result.success ? "success" : "error",
                    confirmButtonText: "OK"
                }).then(() => {
                    if (result.success) window.location.href = '/user/myorders';
                });
            },
            prefill: {
                name: "Inshad",
                email: "johndoe@example.com",
                contact: "9999999999"
            },
            theme: { color: "#528FF0" },
            retry: { enabled: false }
        };

        const rzp = new Razorpay(options);
        rzp.open();

        rzp.on('payment.failed', function (response) {
            Swal.fire({
                icon: "error",
                title: "Payment Failed",
                text: response.error.description,
            });
        });
    } catch (error) {
        console.error("Checkout error:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to process payment. Please try again.",
        });
    }
}  </script>

<br > <script src="js/bootstrap.bundle.min.js"></script>
  <script src="js/tiny-slider.js"></script>
  <script src="js/custom.js"></script>
<%- include("../../views/partials/user/footer") %>
