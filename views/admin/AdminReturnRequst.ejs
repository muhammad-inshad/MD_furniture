<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Return Management</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #1e1e1e, #2a2a2a);
            color: #e0e0e0;
            display: flex;
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Sidebar */
        .sidebar {
            width: 285px;
            background: #1a1a1a;
            padding: 25px;
            position: fixed;
            height: 100vh;
            top: 0;
            left: 0;
            transition: transform 0.3s ease;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.6);
            z-index: 1000;
        }

        .sidebar h2 {
            text-align: center;
            margin-bottom: 35px;
            color: #00d4ff;
            font-size: 26px;
            font-weight: 600;
            letter-spacing: 1.5px;
        }

        .sidebar a {
            display: flex;
            align-items: center;
            color: #b0b0b0;
            text-decoration: none;
            padding: 12px 15px;
            margin: 10px 0;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-size: 16px;
        }

        .sidebar a:hover {
            background: #00d4ff;
            color: #1a1a1a;
            transform: translateX(5px);
        }

        /* Hamburger Menu */
        .hamburger {
            display: none;
            font-size: 28px;
            background: none;
            border: none;
            color: #00d4ff;
            cursor: pointer;
            padding: 10px;
            position: fixed;
            top: 15px;
            left: 15px;
            z-index: 1100;
            transition: color 0.3s ease;
        }

        .hamburger:hover {
            color: #00aaff;
        }

        /* Content Area */
        .content {
            margin-left: 250px;
            padding: 40px;
            width: calc(100% - 250px);
            transition: all 0.3s ease;
        }

        h1 {
            color: #00d4ff;
            text-align: center;
            margin-bottom: 30px;
            font-weight: 600;
            font-size: 32px;
            text-shadow: 0 2px 10px rgba(0, 212, 255, 0.3);
        }

        /* Table Container */
        .table-container {
            background: #252525;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
            padding: 20px;
            overflow-x: auto;
            transition: transform 0.3s ease;
        }

        .table-container:hover {
            transform: translateY(-8px);
        }

        /* Table Styling */
        .return-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background: #2e2e2e;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }

        .return-table th, .return-table td {
            padding: 18px;
            text-align: left;
            font-size: 15px;
        }

        .return-table th {
            background: #3a3a3a;
            color: #00d4ff;
            text-transform: uppercase;
            letter-spacing: 1.2px;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .return-table tr {
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: background 0.3s ease;
        }

        .return-table tr:hover {
            background: rgba(0, 212, 255, 0.1);
        }

        .return-table tbody tr:last-child {
            border-bottom: none;
        }

        /* Button Styling */
        .accept-btn, .reject-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            font-size: 14px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            margin: 5px;
        }

        .accept-btn {
            background: #00d4ff;
            color: #1a1a1a;
        }

        .accept-btn:hover {
            background: #00aaff;
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(0, 212, 255, 0.5);
        }

        .reject-btn {
            background: #ff6f61;
            color: #fff;
        }

        .reject-btn:hover {
            background: #ff4d3f;
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(255, 111, 97, 0.5);
        }

        /* Status Text */
        .status-approved {
            font-weight: bold;
            color: #00d4ff;
        }

        .status-rejected {
            font-weight: bold;
            color: #ff6f61;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                transform: translateX(-100%);
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .content {
                margin-left: 0;
                width: 100%;
                padding: 20px;
            }

            .hamburger {
                display: block;
            }

            .return-table th, .return-table td {
                padding: 12px;
                font-size: 13px;
            }

            .accept-btn, .reject-btn {
                font-size: 12px;
                padding: 8px 15px;
                display: block;
                width: 100%;
                margin: 5px 0;
            }
        }
        
        /* Pagination */
        #pagination-form {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        #pagination-form button {
            background: #00d4ff;
            color: #1a1a1a;
            border: none;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            font-size: 16px;
        }

        #pagination-form button:hover {
            background: #00aaff;
            transform: scale(1.05);
        }

        #pagination-form button:disabled {
            background: #3a3a3a;
            cursor: not-allowed;
            transform: none;
        }

        #page-number {
            padding: 8px 15px;
            background: #3a3a3a;
            border-radius: 20px;
            font-weight: 600;
            font-size: 16px;
        }

    </style>
</head>
<body>
    <button class="hamburger">â˜°</button>
    <div class="sidebar">
        <h2>Return Management</h2>
        <a href="/admin/dashboard">Dashboard</a>
        <a href="/admin/userManagement">Manage Users</a>
        <a href="/admin/CategoryManagement">Category Management</a>
        <a href="/admin/productManagement">Product Management</a>
        <a href="/admin/ordermanagment">Order Management</a>
        <a href="/admin/coupenMenagement">Coupon Management</a>
        <a href="/admin/SalesReport">Sales Report</a>
        <a href="/admin/AdminReturnRequest" class="active">Return Management</a>
        <a href="/admin/referralManagement" class="active">Referral Management</a>
        <a href="/admin/logout">Logout</a>
    </div>

    <div class="content">
        <h1>Return Management</h1>

        <div class="table-container">
            <table class="return-table">
                <thead>
                    <tr>
                        <th>Item Name</th>
                        <th>Item ID</th>
                        <th>Reason for Return</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (returnRequests && returnRequests.length > 0) { %>
                        <% returnRequests.forEach(request => { %>
                            <tr>
                                <td>
                                    <% if (request.productDetails) { %>
                                        <%= request.productDetails.productName %>
                                    <% } else { %>
                                        <span>No Item Available</span>
                                    <% } %>
                                </td>
                                <td><%= request._id %></td>
                                <input type="hidden" value="<%= request.userId %>" name="userId" class="userId">
                                <td><%= request.ReturnReson %></td>
                                <td>
                                    <% if (request.status === "ReturnRequst") { %>
                                        <button class="accept-btn" data-id="<%= request._id %>">Accept</button>
                                        <button class="reject-btn" data-id="<%= request._id %>">Reject</button>
                                    <% } else if (request.status === "Rejected") { %>
                                        <span class="status-rejected">Product return request rejected</span>
                                    <% } else if (request.status === "Returned") { %>
                                        <span class="status-approved">Product return request approved</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="4" style="text-align: center; padding: 20px;">No return requests found.</td>
                        </tr>
                    <% } %>
                </tbody>
                       
            </table>
            <form id="pagination-form" method="get" action="/admin/AdminReturnRequest">
                <button type="button" id="prev-btn" onclick="setPage(currentPage - 1)">Previous</button>
                <span id="page-number">1</span>  <!-- Initially set to 1 -->
                <button type="button" id="next-btn" onclick="setPage(currentPage + 1)">Next</button>
            </form>
        </div>
    </div>
    <script>
 let urlParams = new URLSearchParams(window.location.search);
    let currentPage = parseInt(urlParams.get("page")) || 1; // Default to page 1
    let totalPages = <%= totalPages %>; // Dynamically set from backend
    function setPage(page) {
        if (page < 1 || page > totalPages) return; // Prevent invalid pages

        currentPage = page;
        document.getElementById("page-number").textContent = currentPage;

        // Disable buttons when out of range
        document.getElementById("prev-btn").disabled = currentPage === 1;
        document.getElementById("next-btn").disabled = currentPage === totalPages;

        // Update URL and submit form
        window.location.href = `/admin/AdminReturnRequest?page=${currentPage}`;
    }
    document.addEventListener("DOMContentLoaded", () => {
    let urlParams = new URLSearchParams(window.location.search);
    let currentPage = parseInt(urlParams.get("page")) || 1; // Get updated page from URL

    document.getElementById("page-number").textContent = currentPage; // Update displayed page number
    document.getElementById("prev-btn").disabled = currentPage === 1;
    document.getElementById("next-btn").disabled = currentPage === totalPages;
});

    </script>

    <script>
        // Hamburger menu toggle
        const hamburger = document.querySelector('.hamburger');
        const sidebar = document.querySelector('.sidebar');
        hamburger.addEventListener('click', () => {
            sidebar.classList.toggle('active');
        });

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".accept-btn").forEach(button => {
                button.addEventListener("click", async (event) => {
                    const requestId = event.target.getAttribute("data-id");
                    const userId = event.target.closest("tr").querySelector(".userId").value;

                    const confirmAction = await Swal.fire({
                        title: "Accept Return Request?",
                        text: "Are you sure you want to accept this return?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#00d4ff",
                        cancelButtonColor: "#ff6f61",
                        confirmButtonText: "Yes, Accept",
                        background: '#252525',
                        color: '#e0e0e0'
                    });

                    if (confirmAction.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/acceptReturn/${requestId}`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ userId })
                            });

                            const result = await response.json();
                            if (result.success) {
                                Swal.fire({
                                    title: "Accepted!",
                                    text: "The return request has been accepted.",
                                    icon: "success",
                                    background: '#252525',
                                    color: '#e0e0e0',
                                    confirmButtonColor: '#00d4ff'
                                });

                                const actionsCell = event.target.closest("td");
                                actionsCell.innerHTML = `<span class="status-approved">Product return request approved</span>`;
                            } else {
                                throw new Error(result.message);
                            }
                        } catch (error) {
                            Swal.fire({
                                title: "Error",
                                text: "Failed to accept return request.",
                                icon: "error",
                                background: '#252525',
                                color: '#e0e0e0',
                                confirmButtonColor: '#ff6f61'
                            });
                        }
                    }
                });
            });

            document.querySelectorAll(".reject-btn").forEach(button => {
                button.addEventListener("click", async (event) => {
                    const requestId = event.target.getAttribute("data-id");

                    const confirmAction = await Swal.fire({
                        title: "Reject Return Request?",
                        text: "Are you sure you want to reject this return?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#ff6f61",
                        cancelButtonColor: "#00d4ff",
                        confirmButtonText: "Yes, Reject",
                        background: '#252525',
                        color: '#e0e0e0'
                    });

                    if (confirmAction.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/rejectReturn/${requestId}`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" }
                            });

                            const result = await response.json();
                            if (result.success) {
                                Swal.fire({
                                    title: "Rejected!",
                                    text: "The return request has been rejected.",
                                    icon: "success",
                                    background: '#252525',
                                    color: '#e0e0e0',
                                    confirmButtonColor: '#00d4ff'
                                });

                                const actionsCell = event.target.closest("td");
                                actionsCell.innerHTML = `<span class="status-rejected">Product return request rejected</span>`;
                            } else {
                                throw new Error(result.message);
                            }
                        } catch (error) {
                            Swal.fire({
                                title: "Error",
                                text: "Failed to reject return request.",
                                icon: "error",
                                background: '#252525',
                                color: '#e0e0e0',
                                confirmButtonColor: '#ff6f61'
                            });
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>